---
export const prerender = true

import { FullImageDetails } from "@/components/common/ImageGallery/ImageGallery.component"
import { ImageDetails, Images } from "@/data/sharedImages"
import { getImage } from "astro:assets"
import ImageContentRow from "./ImageContentRow.component"

interface Props {
  direction?: "vertical" | "horizontal"
  images: string[]
  noCap?: boolean
}

const CRUNCH_WIDTH = 1300

const imagesProcessed = await Promise.all(
  Astro.props.images.map(async (image) => {
    // Find relevant image object
    const imageObject = Images.find(
      (imageItem) => imageItem.id === image
    )
    if (!imageObject) return null

    const importedImage = await imageObject.src()
    const importedImageInner = importedImage.default

    // Check if image is smaller than crunch size
    const isSmall = importedImageInner.width < CRUNCH_WIDTH

    // Generate an image of the correct size
    return {
      originalObject: imageObject,
      smallImage: await getImage({
        src: importedImageInner,
        alt: imageObject.alt || "",
        format: "webp",
        width: isSmall
          ? importedImageInner.width
          : CRUNCH_WIDTH,
        quality: 99,
      }),
      processedObject: await getImage({
        src: importedImageInner,
        alt: imageObject.alt || "",
        quality: 90,
        format: "webp",
        loading: "lazy",
      }),
    } as FullImageDetails
  })
)
---

<ImageContentRow
  client:only="react"
  imageItems={imagesProcessed}
  noCap={Astro.props.noCap}
/>
